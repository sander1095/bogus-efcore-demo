{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "UseSeeding",
  "steps": [
    {
      "file": "BogusEfCoreUseSeeding/Product.cs",
      "description": "In this demo we are storing Products and Categories in a SQL Server database.",
      "line": 3
    },
    {
      "file": "BogusEfCoreUseSeeding/ProductContext.cs",
      "selection": {
        "start": {
          "line": 5,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 2
        }
      },
      "description": "EF Core is configured to treat these models as entries for our tables. We use `OnModelCreating` to set up some indexes."
    },
    {
      "file": "BogusEfCoreUseSeeding/Worker.cs",
      "selection": {
        "start": {
          "line": 15,
          "character": 1
        },
        "end": {
          "line": 20,
          "character": 29
        }
      },
      "description": "We are displaying these products in the terminal, using the `Spectre.Console` library.\r\n\r\nWe use EF Core's `DbContext` to grab all the products with their categories and then pass that to `DrawTable`"
    },
    {
      "file": "BogusEfCoreUseSeeding/Program.cs",
      "description": "Let's go ahead and run the application to see what it looks like when the database is empty",
      "line": 87
    },
    {
      "file": "BogusEfCoreUseSeeding/DatabaseSeeder.cs",
      "description": "We've seen that the database is empty. We could add entries by hand, but this is prone to errors, slow and boring.\r\n\r\nI've created a class called `DatabaseSeeder` that can do this all for us.\r\n\r\nThere are 3 properties, `Products`, `ProductCategories` and `ProductProductCategories` that will be filled with data generated by `Bogus`.",
      "line": 5
    },
    {
      "file": "BogusEfCoreUseSeeding/DatabaseSeeder.cs",
      "description": "The data will be generated when the class is instantiated. In this case we are generating 100 products, 22 categories and 200 links between products and categories",
      "line": 11
    },
    {
      "file": "BogusEfCoreUseSeeding/DatabaseSeeder.cs",
      "description": "We're creating a `Faker` instance for the `Product` class.\r\n\r\n- The name should be based on a `ProductName` from the `Commerce` dataset.\r\n- The CreationDate should be based on a date. In this case, we also pass in a reference date, to ensure we get deterministic behavior.\r\n",
      "line": 22
    },
    {
      "file": "BogusEfCoreUseSeeding/DatabaseSeeder.cs",
      "description": "Next, we generate our 100 products. Each product will be generated with its own seed to ensure deterministic behavior.",
      "line": 33
    },
    {
      "file": "BogusEfCoreUseSeeding/DatabaseSeeder.cs",
      "description": "Each product that's generated will call this `SeedRow` method. This will then use the unique seed of its index to generate a fake product.",
      "line": 73
    },
    {
      "file": "BogusEfCoreUseSeeding/DatabaseSeeder.cs",
      "description": "The categories are generated by using a Category from Bogus' datasets.\r\n\r\n`SeedRow` is also called to set this up in a deterministic way.",
      "line": 42
    },
    {
      "file": "BogusEfCoreUseSeeding/DatabaseSeeder.cs",
      "selection": {
        "start": {
          "line": 57,
          "character": 1
        },
        "end": {
          "line": 70,
          "character": 41
        }
      },
      "description": "Now, we need to create entries for our join table, which is called `ProductProductCategory`.\r\n\r\nTo do this, we create a Faker, and we use Bogus' `PickRandom` method to pick random products and categories.\r\n\r\nAFterwards, we perform a `GroupBy` and `Select First` to remove duplicate entries that might have been created."
    },
    {
      "file": "BogusEfCoreUseSeeding/Program.cs",
      "selection": {
        "start": {
          "line": 7,
          "character": 1
        },
        "end": {
          "line": 10,
          "character": 32
        }
      },
      "description": "Now, we need to tell EF Core to use the `DatabaseSeeder` class with its seeding process.\r\n\r\nThis demo uses EF Core 9's `UseSeeding` feature. Take a look at the `BogusEfCoreHasData` for the \"classic\" `HasData` approach which uses migrations."
    },
    {
      "file": "BogusEfCoreUseSeeding/Program.cs",
      "selection": {
        "start": {
          "line": 12,
          "character": 1
        },
        "end": {
          "line": 23,
          "character": 10
        }
      },
      "description": "This code is executed when `UseSeeding` runs. We instantiate our `DatabaseSeeder` and then store some DbSets for convenience.\r\n\r\nWe loop over the products created by Bogus, and then check if they already exist. If not, we add them to the DbSet."
    },
    {
      "file": "BogusEfCoreUseSeeding/Program.cs",
      "selection": {
        "start": {
          "line": 25,
          "character": 1
        },
        "end": {
          "line": 39,
          "character": 10
        }
      },
      "description": "We do the same for the Join Table entities and the categories."
    },
    {
      "file": "BogusEfCoreUseSeeding/Program.cs",
      "selection": {
        "start": {
          "line": 41,
          "character": 9
        },
        "end": {
          "line": 41,
          "character": 31
        }
      },
      "description": "Finally, we call `SaveChanges`. All the seeding modifications are now translated to SQL and executed in the database!"
    },
    {
      "file": "BogusEfCoreUseSeeding/Program.cs",
      "selection": {
        "start": {
          "line": 43,
          "character": 5
        },
        "end": {
          "line": 43,
          "character": 62
        }
      },
      "description": "Right below this bit of code, we see `UseAsyncSeeding`. This is the same as `UseSeeding`, except that this uses the `Async` versions.\r\n\r\n`UseAsyncSeeding` is called when you use things like `MigrateAsync`"
    },
    {
      "file": "BogusEfCoreUseSeeding/Program.cs",
      "description": "There's multiple ways to have `UseSeeding`'s logic applied to the database. The easiest approach in this demo is to run `dotnet ef database update` in the terminal.\r\n\r\nLet's do this, and re-run the application",
      "line": 87,
      "selection": {
        "start": {
          "line": 1,
          "character": 122
        },
        "end": {
          "line": 1,
          "character": 147
        }
      }
    }
  ]
}